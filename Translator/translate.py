# -*- coding: utf-8 -*-
"""translation_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSxejAh1ILEoXGjcd_IMi39VJ2IMFblM
"""

def translate_instance(text):
  body = [{
    'text': text
}]

  request = requests.post(constructed_url, params=params, headers=headers, json=body)
  response = request.json()
  return response[0]['translations'][0]['text']

import requests, uuid, json, os, csv


# Add your key and endpoint
key = "f47b2561a1e54d9aaee352b8438e426a"
endpoint = "https://api.cognitive.microsofttranslator.com"

# Add your location, also known as region. The default is global.
# This is required if using a Cognitive Services resource.
location = "eastus"

path = '/translate'
constructed_url = endpoint + path

params = {
    'api-version': '3.0',
    'from': 'en',
    'to': 'ar'
}

headers = {
    'Ocp-Apim-Subscription-Key': key,
    'Ocp-Apim-Subscription-Region': location,
    'Content-type': 'application/json',
    'X-ClientTraceId': str(uuid.uuid4())
}
data_path = '/content/drive/MyDrive/squad-train-v2.0.json'
write_path = '/content/drive/MyDrive/Asquadv2-train.csv'
cnt = 1
with open(data_path) as f:
  squad_dict = json.load(f)
  for article in squad_dict['data']:
    title = article['title']
    ar_title = translate_instance(title)
    for passage in article['paragraphs']:
      context = passage['context']
      ar_context = translate_instance(context)
      for qa in passage['qas']:
        question = qa['question']
        is_impossible = None
        if 'plausible_answers' in qa.keys():# there is two cases if the question have no answer then use plausible answer
          access = 'plausible_answers'
          is_impossible = True
        else:
          access = 'answers'
          is_impossible = False
        for answer in qa[access]:
          ar_question = translate_instance(question)
          ar_answer = translate_instance(answer['text'])
          id = qa['id']
          res = None
          if is_impossible:
            res = -2
          else:
            res = ar_context.find(ar_answer)
          res_dict = {'title':ar_title,'context':ar_context, 'question':ar_question, 'answer':ar_answer, 'answer_start':res,'is_impossible':is_impossible, 'count':cnt,'ID':id}
          if not os.path.exists(write_path):
            with open(write_path,'w') as f:
              writer = csv.DictWriter(f, fieldnames=res_dict.keys())
              writer.writeheader()
          with open(write_path, 'a') as f:
            writer = csv.DictWriter(f, fieldnames=res_dict.keys())
            #writer.writeheader()
            writer.writerow(res_dict)
          if (cnt%100==0):
            print(cnt)
          cnt +=1
print('---------------------------------')
print('Translation Finished')